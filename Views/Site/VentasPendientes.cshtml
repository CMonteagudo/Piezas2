@model VentasModel
@using Piezas2.Models
@using Microsoft.Extensions.Options

@inject IOptions<PaypalSetting> pSetting

@{
  ViewData["Title"] = "Artículos pendientes de pago";
}

<script id="paypal_sdk" src="https://www.paypal.com/sdk/js?client-id=@pSetting.Value.ClientID"></script>

<div class="main-frame">

  <h1 style="text-align:center"> Lista de artículos pendientes de pago. </h1>

  <div id="BuyList">
    <div class="buy-item">
      <div></div>
      <div>Artículo</div>
      <div class="buy-item-count">Cant.</div>
      <div class="buy-item-precio">Precio</div>
      <div class="buy-item-monto">Monto</div>
      <div></div>
    </div>
    <form id="ventas-items">
    </form>

    <div class="buy-total">
      Total a pagar: <span></span><span><select>
          <option value="0">usd</option>
          <option value="2">euro</option>
          <option value="3">cup</option>
      </select>
      </span>
    </div>

    <div id="ErrPago"></div>
    <div id="bntPagar"  class="btnCenter">Pagar</div>
    <div id="bntPaypal"></div>

    <button id="btnClose" type="button" class="right-top" title="Cierra la ventana." ><span aria-hidden="true">&times;</span></button>
  </div>

</div>

@section Scripts{
  <script type="text/javascript">
    var UserId =  @Model._UserId;

    var Ventas = [];                                            // Listado de ventas pedientes por pagar para el usuario actual
    var FacturaDate;                                            // Fecha de emision de la factura

    var Msg = new MsgAlert( "#ErrPago", "danger", "strong" );
    var bntPagar  = $("#bntPagar");
    var frmData   = $("#ventas-items");
    var valTotal  = $(".buy-total span:first-child");


    var ModoWidget   = @Model._Widget;                          // Estable el modo Widget, que se usa para llamar la página dentro de otras páginas
    var WidgetNotify = null;                                    // Funcion para notificar al padre cuando esta en modo iFarme

    // Se llama después de cargarse la página completamente
    $( function()
      {
      bntPagar.click( OnPagar );
      bntPagar.hide();

      if( ModoWidget )
        {
        $(".main-frame").css( "min-height", "0" );                          /* No se exige una altura minima*/

        $("#btnClose").css( "display", "block" );                           // Maneja boton cerrar del Widget
        $("#btnClose").on( 'click', ()=>{WidgetNotify( "close");} );   
        }

      RefreshVentasList();
      });

    // Si esta en modo Widget notifica el cambio de tamaño para ajustar el tamño del frame
    $(document).ready( function() { ModoWidgetConfig( $(".main-frame")[0] ); } );

    // Quita una compra de la lista de compras
    function RemoveCompra( ev )
      {
      var row = $(ev.currentTarget);
      var id  = row.data("id");

      var Conn = new ServerConnection( "DELETE", (err)=>ShowError(err) );
      Conn.data = 'ventaId='+ id + '&UserId=' + UserId;

      Conn.Send( "/api/delete-venta", (r) => 
        { 
        RefreshVentasList();
        }, frmData  );
      }

    // Cambia el número de articulos a compar
    function ChangeCount( ev )
      {
      if( !ev.currentTarget.reportValidity() ) return;

      Msg.Hide();

      CalculaTotal();
      }

    // Cuando se oprime el botón para ir a pagar
    function OnPagar( )
      {
      if( Ventas.length == 0)                                                                 // Cuando no hay ventas en el carrito no puede hacer nada
        {
        Msg.Show( "No hay ningún artículo para pagar, localice el articulo que desee y oprima comprar." );
        return;
        }

      var frm = frmData[0];
      if( !frm.reportValidity() )                                                             // Verifica que todas la cantidades sen validas
        {
        Msg.Show( "Debe rellenar correctamente todos datos." );
        return;
        }

      var changes = chckChanges();                                                            // Determina si hubo cambio en la cantidad de items
      if( changes.length==0 ) { SetPaypalButtons(); return; }                                 // Si no cambiaron pone los botones de Paypal directamente

      var Conn = new ServerConnection( "POST", (err)=>ShowError(err) );                       // Guarda los cambios en el servidor
      Conn.data = 'jsonVentas='+ JSON.stringify(changes) + '&UserId=' + UserId;;

      Conn.Send( "/api/modify-ventas-counts", (r) => 
        { 
        if( r.Count != changes.length )
          {
          Msg.Show( "No se guardaron todos los cambios en le base de datos" );
          return;
          }

        SetPaypalButtons();                                                                   // Pone los botones de Paypal
        }, frmData  );
      }

    // Recalcula en total a pagar cuando de cambia algún valor
    function CalculaTotal()
      {
      var _lst = frmData.find(".buy-item");                                                   // Obtiene todos los items de la lista

      var total = 0;
      for( var i=0; i<_lst.length; i++ )                                                      // Recorre toda la líneas
        {
        var item = _lst.eq(i).children();
        var num  = +item.eq(3).children().eq(0).val();                                        // Obtiene la cantidad
        var prec = +item.eq(4).text();                                                        // Obtiene el precio

        var monto = num * prec;
        item.eq(5).text( monto.toFixed(2) );                                                  // Pone el monto en la pantalla

        total += monto;                                                                       // Va sumando todos los montos
        }

      valTotal.text( total.toFixed(2) );                                                      // Pone el total a pagar
      }

    // Actualiza la lista de ventas con el contenido que hay en el servidor
    function RefreshVentasList()
      {
      var Conn = new ServerConnection( "GET", (err)=>ShowError(err) );

      frmData.empty();                                                                        // Borra todas la ventas que se estaban mostrando

      Conn.Send( "/api/ventas/"+UserId+"/0", (datos) =>                                       // Busca en el servidor las ventas pendientes para el usuario
        {
        Msg.Hide();

        Ventas = datos;                                                                       // Listado de ventas retornados del servidor
        refreshBuyCount( Ventas.length );                                                     // Actualiza en # de ventas que se muestra

        if( Ventas.length>0 ) FillPagosList( frmData );                                       // Llena la lista con las ventas
        else                  ShowNoPagos( frmData );                                         // Muestra al usuario que no hay ventas

        }, frmData );
      }

    // Muestra un mensaje de error
    function ShowError( err )
      {
      if( err.Error==2005 )                                                                   // Filtra se ya el usuario no esta activo
        {
        err.sError = "La seccion de usurio no se ha inicializado o ha expirado.";
        setUserLogout();                                                                      // Muestra al usuario deslogueado
        }

      ConnError( err, Msg );                                                                  // Lo muestra en la forma de error de conexion a traves de Msg
      }

    // Llena la lista de pagos con los datos obtenisdos desde el servidor
    function FillPagosList(lst)
      {
      for( let venta of Ventas )
        AddVentaToList( lst, venta );

      CalculaTotal();                                                       // Calula el monto de cada venta y el total

      $(".menu-desl div:first-child").click( viewItem );                    // Pone manipuladores para el boton ver del menú de opciones
      $(".menu-desl div:last-child" ).click( RemoveCompra );                // Pone manipuladores para el boton borrar del menú de opciones
      $(".buy-item-name"            ).click( ShowHideMenu );                // Pone manipuladores para Muestrar/Ocultar el menú de opciones

      $(".buy-item-count > .buy-num" ).on( "input", ChangeCount );          // Pone manipuladores para cambiar número de items
      $("body").click( ()=>ShowHideMenu() );                                // Pone manipulador para ocualtar el menú de opciones cuande se oprime afuera

      bntPagar.show();
      }

    // Adiciona una fila en la lista de ventas y retorna el monto adicionado
    function AddVentaToList( lst, venta )
      {
      var foto = venta.Item.Foto;
      if( !foto || foto.length==0 ) foto = "/images/Items/piezas.svg";
      var html =  '<div class="buy-item">' +
                    '<div class="menu-desl">'+
                      '<div class="boton-neutral" data-iditem="'+venta.ItemId+'">Ver</div>' +
                      '<div class="boton-neutral" data-id="'+venta.Id+'">Quitar</div>' +
                    '</div>' +  
                    '<div id="foto-frame60">' +
                      '<img src="'+ foto +'" onload="CenterImg(event)"/>' +
                    '</div>' +
                    '<div class="buy-item-name"><div>'+ venta.Item.Nombre +'</div></div>' +
                    '<div class="buy-item-count">'+
                      '<input class="buy-num" type="number" size="2" value="' + venta.Cantidad +'" min="1" max="100" data-id="'+venta.Id+'" required/>'+
                    '</div>' +
                    '<div class="buy-item-precio">'+venta.Precio.toFixed(2)+'</div>' +
                    '<div class="buy-item-monto"></div>' +
                  '</div>';
      lst.append( html );
      }

    // Pone un cartel que no hay pagos que realizar en el medio de la lista
    function ShowNoPagos(lst)
      {
      var html = '<p>No hay ningún artículo pendiente de pago para el usuario actual.</p>' +
                 '<div id="GoFindItem" class="btnCenter">Ir a Comprar</div>';

      lst.append( html );

      $("#GoFindItem").click( GoFindItem );             // Pone manipulador para ir a buscar artículos
      bntPagar.hide();
      }

    // Chequea si la cantidad de ha sido cambiada en alguno de los articulos
    function chckChanges()
      {
      var chngs = [];
      var lst = frmData.find (".buy-item .buy-num");

      for( var i=0; i<lst.length; i++ )
        {
        var elm = lst.eq(i);
        var val = +elm.val();

        if( val != Ventas[i].Cantidad )
          {
          var id = elm.data("id");
          chngs.push( {id:id, cant:val} );
          }
        }

      return chngs;
      }

    // Muestra oculta el menú de opciones
    function ShowHideMenu( ev )
      {
      var hide = true;
      var menu = null;

      if( ev )
        {
        menu = $(ev.currentTarget).parent().find(".menu-desl");
        hide = menu.hasClass( "show-desl" );

        ev.stopPropagation();
        }

      var inShow = $(".show-desl");
      if( inShow.length>0 )
        {
        inShow.removeClass( "show-desl" );
        inShow.addClass( "hide-desl" );
        }

      if( !hide ) 
        {
        menu.removeClass( "hide-desl" );
        menu.addClass( "show-desl" );
        }
      }

    // Hace que el usuario se muestre desloguedo en la página actual
    function setUserLogout()
      {
      if( WidgetNotify ) WidgetNotify( "chgUser", 0, true );
      else
        {
        if( SetUser != undefined ) SetUser({Id:0});
        }
      }

    // Actualiza el número de items en el carrito
    function refreshBuyCount( count )
      {
      if( WidgetNotify ) WidgetNotify( "chgNBuy", count, true );
      else
        {
        if( SetBuyCount != undefined ) SetBuyCount( count );
        }
      }

    // Muestra el recambio con todos sus datos
    function viewItem( ev )
      {
      var itemId = $(ev.currentTarget).data("iditem");
      var url    = "/recambio/" + itemId;
      
      if( WidgetNotify ) WidgetNotify( "location", url );
      else location = url;
      }

    // Muestra la pagina para buscar articulos
    function GoFindItem()
      {
      var url = "/buscar-recambio/info";
      
      if( WidgetNotify ) WidgetNotify( "location", url );
      else location = url;
      }

    // Muestra los botones de Paypal para realizar el pago
    function SetPaypalButtons()
      {
      bntPagar.hide();                                                            // Oculta el botón de pagar

      frmData.find ("input").each( (idx,elm)=> { elm.readOnly = true; } );        // Desabilita la modificación de la cantidad de items

      if( typeof(paypal) == "undefined" )                                         // No se puedo cargar el sdk de Paypal
        {
        Msg.Show( "No hay acceso a Paypal, revise la conexión a Internet o intentelo en otro momento." );
        return;
        }

//      paypal.Buttons().render('#bntPaypal');                                      // Despliega los botones de paypal
//      paypal.Buttons({ style: { layout: 'horizontal' } }).render('#bntPaypal');

      paypal.Buttons(
        {
        style: { layout: 'horizontal', height:'30px' },

        createOrder: GetOrder,
        onApprove: PagoCompletado,
        onError: ErrorPaypal,
        onCancel: CancelPaypal

        }).render( '#bntPaypal' );
      }

    // Optiene la orden para el pago de Paypal
    function GetOrder( data, actions )
      {
      var factura = GetFacturaId();
      var ord = new PayOrden( factura, valTotal.text(), "usd" );
      
      for( let venta of Ventas )
        {
        var item = ord.AddItem( venta.Item.Nombre, venta.Cantidad, venta.Precio, "usd" ); 
        ord.ItemSku( item, "Vent-" + fix( venta.Id, 4) );
        }

      return actions.order.create( ord.GetDatos() );
      }

    // Se llama cuando la venta es completada
    function PagoCompletado( data, actions )
      {
      return actions.order.capture().then( function(details) 
        {
        var Conn = new ServerConnection( "POST", (err)=>ShowError(err) );
        Conn.data = 'Fecha='+ FacturaDate.toISOString() + '&UserId=' + UserId;;

        Conn.Send( "/api/ventas-pagadas", (datos) => 
          {
          Msg.Hide();

          RefreshVentasList();
          }, frmData );
        });
      }

    // Se llama cuando se produce un error durante el pago
    function ErrorPaypal( err )
      {
      Msg.Show( "Se produjo un error en el pago.<br/>" + JSON.stringify(err) );
      }

    // Se llama cuando el usuario cancela el pago
    function CancelPaypal( data )
      {
      Msg.Show( "Se cancelo el pago.<br/>" + JSON.stringify(data) );
      }

    // Crea un identificador para la factura
    function GetFacturaId( )
      {
      var txt = fix( UserId, 4 ) + "-";

      var fc = new Date();

      txt += fc.getYear()-100;
      txt += fix( fc.getMonth()  , 2 ); 
      txt += fix( fc.getDate()+1 , 2 );
      txt += fix( fc.getHours()  , 2 );
      txt += fix( fc.getMinutes(), 2 );
      txt += fix( fc.getSeconds(), 2 );

      FacturaDate = fc;
      return txt;
      }

    // Rellena una cadena hasta la cantidad de caracteres indicados
    function fix( str, nChars )
      {
      var s = str.toString();
      for( var i=s.length; i<nChars; i++ )
        s = "0" + s;

      return s;
      }
    
  </script>
}

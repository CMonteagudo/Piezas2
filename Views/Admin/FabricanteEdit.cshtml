@model Piezas2.Models.BaseModel
@{
  ViewData["Title"] = "Modificación, Adición y Borrado de fabricantes de recambios de coches";
}

<div class="main-frame">
  <div class="columns-for-edit">
  @if( Model._Widget == 0 )
    {
    <div id="show-lst-panel"> <img src="~/images/btn-tabla.png" title="Muestra/Oculta lista para selección de recambio a editar." /> </div>

    <div id="panelList">
      <div id="headerList">
        <span id="lb-sel-list">Fabricantes:</span>
      </div>

      <div id="list-rec" >
        <div id="ErrorMsgMakes" ></div>
        <div class="table-responsive">
          <table class="table table-bordered table-striped hidden" id="ItemsList">
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>
    }

    <div id="panelDatos">
    @if( Model._Widget == 0 )
      {
      <div id="headerDatos">
        <a id="lnkHome" href="/admin"               ><label>Home            </label></a>
        <a id="lnkNew"  href="javascript:newMaker()"><label>Nuevo Fabricante</label></a>
      </div>
      }

      <div id="edit-rec" >
        <form id="edit-datos" name="datos" class="hidden" enctype="multipart/form-data" method="post" >
          <div id="foto-datos" >
            <div id="foto" >
              <label>Logo:</label>
              <div id="FotoFrame">
                <img id="ImgFoto" onload="CenterImg(event)"/>
              </div>
              <input id="FileFoto" name="FileFoto" type="file" accept="image/*"/>
              <label id="lbFileFoto" for="FileFoto">Seleccione <br/> un fichero</label>
            </div>
            <div id="datos">
              <div class="label-val">
                <label for="Nombre">Nombre:&nbsp;</label><input type="text" id="Nombre" name="Nombre" size="5" placeholder="Escriba le nombre"/>
              </div>
            </div>
          </div>

          <div style="width:100%">
            <br />
            <label for="Descripcion">Descripcion: </label><textarea id="Descripcion" name="Descripcion"></textarea>
          </div>

          <div id="UpdateErrorMsg" ></div>

          <div class="btn-group center-content">
            <button id="btnDel"  type="button" class="btn btn-danger">Borrar</button>
            <button id="btnCopy" type="button" class="btn btn-default">Duplicar</button>
            <button id="btnSave" type="button" class="btn btn-primary">Guardar</button>
          </div>

        <input id="Id"   name="Id"   type="hidden"/>
        <input id="Logo" name="Logo" type="hidden"/>

        <label id="lbId" class="right-top"></label>
        <button id="btnClose" type="button" class="right-top" title="Cierra la ventana." ><span aria-hidden="true">&times;</span></button>
        </form>
      </div>
    </div>

  </div>
</div>


@section Scripts{
  <script type="text/javascript">

    // Lista de todos los Fabricantes que hay en la base de datos
    var Makers = [];     

    // Item actual que se esta modificando
    var nowMaker;       // Datos del item
    var nextID;         // Identificador el items mas cercano al seleccionado

    var Msg1;           // Maneja recuadro para mostrar errores de la derecha (Lista de fabricantes)
    var Msg2;           // Maneja recuadro para mostrar errores de la izquierda (Datos)

    // Elementos donde estan los datos que se estan editando
    var _fotoSrc;
    var _fotoFile;

    var _Id;
    var _Nombre;
    var _Descripcion;

     // Valores de todos los campos al empezar la edicción
    var EditVals = { fotoSrc:"", fotoFile:"", Id:0, Nombre:"", Descripcion:"" };      

    var paramId      = @Model.Id;                               // Identificador que se pasa como parametro a la página
    var ModoWidget   = @Model._Widget;                          // Estable el modo Widget, que se usa para llamar la página dentro de otras páginas
    var WidgetNotify = null;                                    // Funcion para notificar al padre cuando esta en modo iFarme

    // Inicia manipuladores y variables, después de cargarse la página
    $( function()
      {
      _fotoSrc  = $("#ImgFoto");
      _fotoFile = $("#FileFoto");

      _Id          = $("#Id");
      _Nombre      = $("#Nombre");
      _Descripcion = $("#Descripcion");

      // Cuando se oprime el boton para guardar los cambios realizados
      $("#btnSave").on( 'click', GuardaCambios );   
      $("#btnCopy").on( 'click', DuplicarDatos );   
      $("#btnDel" ).on( 'click', DeleteMaker );   

      Msg2 = new MsgAlert( "#UpdateErrorMsg" );

      _fotoFile.change( OnSelectImgFile );
      _fotoSrc.keyup( CheckSave );

      _Nombre.keyup( CheckSave );
      _Descripcion.keyup( CheckSave );

      if( !ModoWidget )
        {
        $("#show-lst-panel" ).on( 'click', e =>{ e.stopPropagation(); AnimatePanel(); } );  
        $("#panelDatos"     ).on( 'click', e =>{ AnimatePanel(true);} );

        Msg1 = new MsgAlert( "#ErrorMsgMakers" );
        RefreshMakersList( paramId );
        }
      else
        {
        setWidgetStyles();
        FindMakerFromServer( paramId );
        }
      } );

    // Si esta en modo Widget notifica el cambio de tamaño para ajustar el tamño del frame
    $(document).ready( function() { ModoWidgetConfig( panelDatos ); } );

    // Se llama cuando se selecciona un fichero de imagen para ponerlo como foto del recambio
    function OnSelectImgFile( e )
      {
	    var files = this.files;
  	  if( !files[0].type.match(/image/) ) 
        {
        alert("Debe seleccionar un fichero de imagen");
        return
        }

      var reader = new FileReader();
      reader.onload = function(e)
        { 
        _fotoSrc[0].src = reader.result;
        CheckSave();
        };
        
      reader.readAsDataURL( files[0] );
      }

    // Actualiza la lista de fabricantes con el contenido que hay en el servidor
    function RefreshMakersList( id )
      {
      ClearItemDatos();

      var Conn = new ServerConnection( "GET", (s)=>ConnError(s,Msg1) );

      Conn.Send( "/api/fabricantes", (datos) => 
        {
        Msg1.Hide();

        Makers = datos;

        FillMakersList();

        if( id>0 ) FindDatosForMaker( id );

        }, "#edit-rec" );
      }

    // Busca entre la lista de fabricantes el fabricante que tiene el identificador dado
    function FindDatosForMaker( id )
      {
      if( DescartMakerChanged()==false ) return;

      ShowPanelDatos();
      AnimatePanel(true);

      for( let maker of Makers )
        {
        if( maker.Id==id )
          {
          Msg2.Hide();

          nowMaker = maker;
          nextID = SelectTableRow( id, "#ItemsList", "#list-rec" );
          SetItemDatos();
          return;
          }
        }

      ClearItemDatos();
      Msg2.Show( "El fabricante con Id="+id+" no se encuentra en la base de datos", "danger" );
      }

    // Busca el fabricante con 'id' dado en el servidor
    function FindMakerFromServer( id )
      {
      ShowPanelDatos();
      ClearItemDatos();
      if( id<=0 ) return;

      var Conn = new ServerConnection( "GET", (s)=>ConnError(s,Msg2) );

      Conn.Send( "/api/fabricante/" + id, (datos) => 
        {
        Msg2.Hide();

        nowMaker = datos;
        if( nowMaker.Id<= 0 )
          {
          Msg2.Show( "El fabricante con Id="+id+" no se encuentra en la base de datos", "danger" );
          return;
          }

         SetItemDatos();
        }, "#panelDatos" );
      }

    // Llena la lista de Fabricantes con los recambios encontrados
    function FillMakersList( )
      {
      $("#ItemsList").children().eq(0).empty();

      for( var i = 0; i < Makers.length; ++i )
        {
        var maker = Makers[i]; 

        var clss = maker.Id == EditVals.Id? " class='row-selected'" : "";
           
        var itemHml = "<tr data-id="+ maker.Id + clss + "><td>" + maker.Nombre + "</td></tr>";

        $("#ItemsList").append( itemHml );
        }

      $("#ItemsList tbody tr").on( 'click', (e)=>
        { 
        var row = $(e.currentTarget);
        var id  = row.data("id");

        FindDatosForMaker( id );
        } );

      ShowInfo();                    // Muestra/esconde información debajo de la tabla de items
      }

    // Muestra el panel de edicción de los datos
    function ShowPanelDatos()        
      {
      $("#edit-datos").removeClass("hidden");
      }

    // Decide la informacion que se debe mostrar y cual no, de acuerdo al resultado de la busqueda
    function ShowInfo()        
      {
      var tabla = $("#ItemsList");
      var count = tabla.children().eq(0).children().length;               // Cantidad de Items que se muestran en la tabla

      // Tabla con la lista de recambios encontrados
      if( count == 0 ) tabla.addClass("hidden"); 
      else             tabla.removeClass("hidden"); 

      // Cartel con información
      if( count == 0 ) Msg1.Show( "No se encontro ningún coche que cumpla las condiciones dadas", "info" );
      else             Msg1.Hide();
      }

    // Se llama cada vez que se va a cambiar el recambio que se esta editando, si el cambio no es posible retorna false
    function DescartMakerChanged( )
      {
      if( DatosChanged() )
        if( confirm("Desea descartar los cambios realizados") )
          UpdateDatos();
        else return false;

      return true;
      }

    // Chequea si los datos cambia y pone el botón de Guardar o no
    function CheckSave()
      {
      var chgd = DatosChanged();

      btnSave.style.display = chgd? "block" : "none";
      btnCopy.style.display = chgd || !EditVals.Id? "none"  : "block";
      }

    // Borra todos los datos que hay sobre el recambio actual
    function ClearItemDatos()
      {
      EditVals ={ fotoSrc:"", fotoFile:"", Id:0, Nombre:"", Descripcion:"" };

      nowMaker = null;
      nextID = SelectTableRow( -1, "#ItemsList", "#list-rec" );

      UpdateDatos();
      }

    // Pone los datos del recambio actual
    function SetItemDatos( dupicate=false )        
      {
      var IdMaker = dupicate? 0 : nowMaker.Id;

      EditVals ={ fotoSrc     :nowMaker.Logo, 
                  fotoFile    :"", 
                  Id          :IdMaker, 
                  Nombre      :nowMaker.Nombre, 
                  Descripcion :nowMaker.Descripcion? nowMaker.Descripcion : "" };

      UpdateDatos();
      }

    // Pone los datos del recambio actual
    function UpdateDatos()        
      {
      _fotoSrc.attr("src", EditVals.fotoSrc );
      _fotoFile.val( EditVals.fotoFile );

      _Id.val( EditVals.Id );

      _Nombre.val( EditVals.Nombre );
      _Descripcion.val( EditVals.Descripcion );

      $("#Logo").val( EditVals.fotoSrc );
      $("#lbId").text( EditVals.Id>0? "ID: " + EditVals.Id  : "" );
      
      btnSave.style.display = "none";

      var disp = (EditVals.Id == 0)? "none" : "block";

      btnCopy.style.display = disp;
      btnDel.style.display  = disp; 
      }

    // Verifica si se cambio algun dato desde el inicio de la edicción
    function DatosChanged()        
      {
      if( EditVals.fotoSrc     != _fotoSrc.attr("src") ) return true;
      if( EditVals.fotoFile    != _fotoFile.val()      ) return true;

      if( EditVals.Id          != _Id.val()            ) return true;
      if( EditVals.Nombre      != _Nombre.val()        ) return true;
      if( EditVals.Descripcion != _Descripcion.val()   ) return true;

      return false;
      }

    // Verifica y obtiene los datos del recambio actual
    function ValidateDatos()        
      {
      if( !ValidateStr( _Nombre, "El nombre del fabricante", 1, 50) )
        return false;

      return true;
      }

    // Determina cual es el modo de ediccion de los datos a utilizar
    function newMaker()
      {
      if( DescartMakerChanged() )
        {
        ShowPanelDatos();
        ClearItemDatos(); 
        }
      }

    // Duplica los datos del fabricante actual, para crear una similar
    function DuplicarDatos()
      {
      if( DescartMakerChanged() )
        SetItemDatos( true );
      }

    // Se llama para guardar los camnios realizados
    function GuardaCambios()
      {
      if( !ValidateDatos() ) return;

      var add = +_Id.val()<=0;
      var url = add? "/api/add-fabricante" : "/api/modify-fabricante";

      var form = document.forms.namedItem("datos");

      var srv = new ServerConnection( "POST", (s)=>ConnError(s, Msg2) );
      srv.SendForm( form, url, (respJson) => 
        {
        var id = respJson.Id;
        if( WidgetNotify ) WidgetNotify( add? "add":"modify", id );                     // Si esta en un Widget, notifica que se Adiciono/Mofifico un modelo
        else               RefreshMakersList( id );                                     // Refresca la lista de marcas y continua la edicción
        });
      }

    // Borra el fabricante actual de la base de datos
    function DeleteMaker()
      {
      if( !confirm("Esta seguro que desea borrar el fabricante:\n'" + nowMaker.Nombre + "'" ) )
        return;

      var form = document.forms.namedItem("datos");

      var srv = new ServerConnection( "DELETE", (s)=>ConnError(s, Msg2) );

      srv.SendForm( form, "/api/delete-fabricante", (respJson) => 
        {
        if( WidgetNotify ) WidgetNotify("delete");
        else               RefreshMakersList( nextID );
        });
      }

  </script>
}
@{
  ViewData["Title"] = "Modificación, Adición y Borrado de Categorias de recambios";
}

<div class="main-frame">
  <div class="columns-for-edit">

    <div>
      <span>Categorias:</span>
    </div>

    <div style="position:relative;">
      <a id="lnkHome" href="/admin"               ><label>Home       </label></a>
      <a id="lnkNew"  href="javascript:newCategoria()"><label>Nueva Categoria</label></a>
    </div>

    <div id="list-rec" >
      <div id="ErrorMsgCategorias" ></div>
      <div class="table-responsive">
        <table class="table table-bordered table-striped hidden" id="ItemsList">
          <tbody></tbody>
        </table>
      </div>
    </div>

    <div id="edit-rec" >
      <form id="edit-datos" name="datos" class="hidden" enctype="multipart/form-data" method="post" >
        <div id="foto-datos" >
          <div id="foto" >
            <label>Logo:</label>
            <div id="FotoFrame">
              <img id="ImgFoto" onload="CenterImg(event)"/>
            </div>
            <input id="FileFoto" name="FileFoto" type="file" accept="image/*"/>
            <label id="lbFileFoto" for="FileFoto">Seleccione <br/> un fichero</label>
          </div>
          <div id="datos">
            <div class="label-val">
              <label for="Id2">Identicador:&nbsp;</label><input type="text" id="Id2" name="Id2" size="5" placeholder="Escriba identificador"/>
            </div>
            <div class="label-val">
              <label for="Nombre">Nombre:&nbsp;</label><input type="text" id="Nombre" name="Nombre" size="5" placeholder="Escriba le nombre"/>
            </div>
          </div>
        </div>

        <div style="width:100%">
          <br />
          <label for="Descripcion">Descripcion: </label><textarea id="Descripcion" name="Descripcion"></textarea>
        </div>

        <div id="UpdateErrorMsg" ></div>

        <div class="btn-group center-content">
          <button id="btnDel"  type="button" class="btn btn-danger">Borrar</button>
          <button id="btnCopy" type="button" class="btn btn-default">Duplicar</button>
          <button id="btnSave" type="button" class="btn btn-primary">Guardar</button>
        </div>

      <input id="Id"   name="Id" type="hidden"/>
      <input id="edId" name="edId" type="hidden"/>
      <input id="Logo" name="Logo" type="hidden"/>

      <label id="lbId" class="right-top"></label>
      </form>
    </div>


  </div>
</div>


@section Scripts{
  <script type="text/javascript">

    // Lista de todos lss Categorias que hay en la base de datos
    var Categorias = [];     

    // Item actual que se esta modificando
    var nowCategoria;   // Datos del item
    var nextID;         // Identificador el items mas cercano al seleccionado

    var Msg1;           // Maneja recuadro para mostrar errores de la derecha (Lista de Categorias)
    var Msg2;           // Maneja recuadro para mostrar errores de la izquierda (Datos)

    // Elementos donde estan los datos que se estan editando
    var _fotoSrc;
    var _fotoFile;

    var _edId;          // ID original de la categoria que se esta editando
    var _Id;            // ID de la categoria que se manda al servidor
    var _Id2;           // ID que se muestra al usuario (para modificar o no)
    var _Nombre;
    var _Descripcion;

     // Valores de todos los campos al empezar la edicción
    var EditVals = { fotoSrc:"", fotoFile:"", Id:0, Nombre:"", Descripcion:"" };      

    // Inicia manipuladores y variables, después de cargarse la página
    $( function()
      {
      _fotoSrc  = $("#ImgFoto");
      _fotoFile = $("#FileFoto");
      _edId     = $("#edId");

      _Id          = $("#Id");
      _Id2         = $("#Id2");
      _Nombre      = $("#Nombre");
      _Descripcion = $("#Descripcion");

      // Cuando se oprime el boton para guardar los cambios realizados
      $("#btnSave").on( 'click', GuardaCambios );   
      $("#btnCopy").on( 'click', DuplicarDatos );   
      $("#btnDel" ).on( 'click', DeleteCategoria );   

      Msg1 = new MsgAlert( "#ErrorMsgCategorias" );
      Msg2 = new MsgAlert( "#UpdateErrorMsg" );

      _fotoFile.change( OnSelectImgFile );
      _fotoSrc.keyup( CheckSave );

      _Id2.keyup( ()=>{ _Id.val( _Id2.val() ); CheckSave(); } );
      _Nombre.keyup( CheckSave );
      _Descripcion.keyup( CheckSave );

      RefreshCategoriasList( @ViewData["Id"] );
      } );

    // Se llama cuando se selecciona un fichero de imagen para ponerlo como foto del recambio
    function OnSelectImgFile( e )
      {
	    var files = this.files;
  	  if( !files[0].type.match(/image/) ) 
        {
        alert("Debe seleccionar un fichero de imagen");
        return
        }

      var reader = new FileReader();
      reader.onload = function(e)
        { 
        _fotoSrc[0].src = reader.result;
        CheckSave();
        };
        
      reader.readAsDataURL( files[0] );
      }

    // Esta funcion chequea si el click se produjo dentro de una ventana popup
    function CheckClickOnPopup( e )
      {
      var popups = $(".filters-popup");
      for( var i=0; i < popups.length; i++ )
        {
        var rect = $(".filters-popup")[i].getBoundingClientRect();

        if( e.clientX >= rect.left && e.clientX <= rect.right && e.clientY >= rect.top && e.clientY <= rect.bottom )
          return;
        }

      $(".filters-btn").removeClass("open");
      }

    // Actualiza la lista de Categorias con el contenido que hay en el servidor
    function RefreshCategoriasList( id )
      {
      ClearItemDatos();

      var Conn = new ServerConnection( "GET", (s)=>ConnError(s,Msg1) );

      Conn.Send( "/api/categorias", (datos) => 
        {
        Msg1.Hide();

        Categorias = datos;

        FillCategoriasList();

        if( id>0 ) FindDatosForCategoria( id );

        }, "#edit-rec" );
      }

    // Llena la lista de Categorias con todas las categirias de la base de datos
    function FillCategoriasList( )
      {
      $("#ItemsList").children().eq(0).empty();

      for( var i = 0; i < Categorias.length; ++i )
        {
        var categoria = Categorias[i]; 

        var clss = categoria.id == EditVals.Id? " class='row-selected'" : "";
           
        var itemHml = "<tr data-id="+ categoria.id + clss + "><td>" + categoria.nombre + "</td></tr>";

        $("#ItemsList").append( itemHml );
        }

      $("#ItemsList tbody tr").on( 'click', (e)=>
        { 
        var row = $(e.currentTarget);
        var id  = row.data("id");

        FindDatosForCategoria( id );
        } );

      ShowInfo();                    // Muestra/esconde información debajo de la tabla de items
      }

    // Busca los coches donde se usa el item dado por 'id'
    function FindDatosForCategoria( id )
      {
      if( DescartCategoriaChanged()==false ) return;

      ShowPanelDatos();
      for( let categoria of Categorias )
        {
        if( categoria.id==id )
          {
          Msg2.Hide();

          nowCategoria = categoria;
          nextID   = SelectTableRow( id, "#ItemsList", "#list-rec" );
          SetItemDatos();
          return;
          }
        }

      ClearItemDatos();
      Msg2.Show( "La Categoria con Id="+id+" no se encuentra en la base de datos", "danger" );
      }

    // Muestra el panel de edicción de los datos
    function ShowPanelDatos()        
      {
      $("#edit-datos").removeClass("hidden");
      }

    // Decide la informacion que se debe mostrar y cual no, de acuerdo al resultado de la busqueda
    function ShowInfo()        
      {
      var tabla = $("#ItemsList");
      var count = tabla.children().eq(0).children().length;               // Cantidad de Items que se muestran en la tabla

      // Tabla con la lista de recambios encontrados
      if( count == 0 ) tabla.addClass("hidden"); 
      else             tabla.removeClass("hidden"); 

      // Cartel con información
      if( count == 0 ) Msg1.Show( "No se encontro ningún coche que cumpla las condiciones dadas", "info" );
      else             Msg1.Hide();
      }

    // Se llama cada vez que se va a cambiar el recambio que se esta editando, si el cambio no es posible retorna false
    function DescartCategoriaChanged( )
      {
      if( DatosChanged() )
        if( confirm("Desea descartar los cambios realizados") )
          UpdateDatos();
        else return false;

      return true;
      }

    // Chequea si los datos cambia y pone el botón de Guardar o no
    function CheckSave()
      {
      var chgd = DatosChanged();

      btnSave.style.display = chgd? "block" : "none";
      btnCopy.style.display = chgd || !+_edId.val()? "none"  : "block";
      }

    // Borra todos los datos que hay sobre el recambio actual
    function ClearItemDatos()
      {
      EditVals ={ fotoSrc:"", fotoFile:"", Id:0, Nombre:"", Descripcion:"" };

      _edId.val(0); 
      nowCategoria = null;
      nextID = SelectTableRow( -1, "#ItemsList", "#list-rec" );

      UpdateDatos();
      }

    // Pone los datos del recambio actual
    function SetItemDatos( dupicate=false )        
      {
      _edId.val( dupicate? 0 : nowCategoria.id ); 

      EditVals ={ fotoSrc     :nowCategoria.logo, 
                  fotoFile    :"", 
                  Id          :nowCategoria.id, 
                  Nombre      :nowCategoria.nombre, 
                  Descripcion :nowCategoria.descripcion? nowCategoria.descripcion : "" };

      UpdateDatos();
      }

    // Muestra los datos de la categoria actual en la página
    function UpdateDatos()        
      {
      _fotoSrc.attr("src", EditVals.fotoSrc );
      _fotoFile.val( EditVals.fotoFile );

      _Id.val( EditVals.Id );
      _Id2.val( EditVals.Id );

      _Nombre.val( EditVals.Nombre );
      _Descripcion.val( EditVals.Descripcion );

      $("#Logo").val( EditVals.fotoSrc );
      $("#lbId").text( EditVals.Id>0? "ID: " + EditVals.Id  : "" );
      
      btnSave.style.display = "none";

      var nuevo = (+_edId.val() == 0);
      var disp = (nuevo)? "none" : "block";

      btnCopy.style.display = disp;
      btnDel.style.display  = disp; 

      _Id2[0].disabled = !nuevo;
      }

    // Verifica si se cambio algun dato desde el inicio de la edicción
    function DatosChanged()        
      {
      if( EditVals.fotoSrc     != _fotoSrc.attr("src") ) return true;
      if( EditVals.fotoFile    != _fotoFile.val()      ) return true;

      if( EditVals.Id          != _Id2.val()           ) return true;
      if( EditVals.Nombre      != _Nombre.val()        ) return true;
      if( EditVals.Descripcion != _Descripcion.val()   ) return true;

      return false;
      }

    // Verifica y obtiene los datos del recambio actual
    function ValidateDatos()        
      {
      if( !ValidateStr( _Nombre, "El nombre de la Categoria", 1, 50) )
        return false;

      return true;
      }

    // Determina cual es el modo de ediccion de los datos a utilizar
    function newCategoria()
      {
      if( DescartCategoriaChanged() )
        {
        ShowPanelDatos();
        ClearItemDatos(); 
        }
      }

    // Duplica los datos de la Categoria actual, para crear una similar
    function DuplicarDatos()
      {
      if( DescartCategoriaChanged() )
        SetItemDatos( true );
      }

    // Se llama para guardar los camnios realizados
    function GuardaCambios()
      {
      if( !ValidateDatos() ) return;
      var url = +_edId.val()>0? "/api/modify-categoria" : "/api/add-categoria";

      var form = document.forms.namedItem("datos");

      var srv = new ServerConnection( "POST", (s)=>ConnError(s, Msg2) );
      srv.SendForm( form, url, (respJson) => 
        {
        RefreshCategoriasList( respJson.Id );
        });
      }

    // Borra la categoria actual de la base de datos
    function DeleteCategoria()
      {
      if( !confirm("Esta seguro que desea borrar la categoria:\n'" + nowCategoria.nombre + "'" ) )
        return;

      var form = document.forms.namedItem("datos");

      var srv = new ServerConnection( "DELETE", (s)=>ConnError(s, Msg2) );

      srv.SendForm( form, "/api/delete-categoria", (respJson) => 
        {
        RefreshCategoriasList( nextID );
        });
      }

  </script>
}
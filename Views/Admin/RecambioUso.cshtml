@model Piezas2.Models.RecambioUsoModel
@{
  ViewData["Title"] = "Define el uso de los recambios";
}

<div class="container main-frame">
  <div class="columns-container">

    <div class="column" >
      <div class="btn-group filters-btn">
        <button type="button" class="btn" style="background-color:transparent"></button>
        <button type="button" class="btn dropdown-toggle show-popup" data-toggle="" aria-expanded="false" style="background-color:transparent">
           Recambios: <span class="caret"></span>
        </button>
        <div class="dropdown-menu filters-popup" role="menu">
          <button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>

          <div class="flex-grid">
            <div class="btn-group item" id="comboCategoria">
              <button type="button" class="btn btn-default no-close">&emsp;</button>
              <button type="button" class="btn dropdown-toggle btn-primary no-close" data-toggle="dropdown" aria-expanded="false">
                <span class="caret"></span><span class="sr-only">Toggle Dropdown</span>
              </button>
              <ul class="dropdown-menu no-close" role="menu"></ul>
            </div>

            <div class="btn-group item" id="comboSubCategoria">
              <button type="button" class="btn btn-default">&emsp;</button>
              <button type="button" class="btn dropdown-toggle btn-primary" data-toggle="dropdown" aria-expanded="false">
                <span class="caret"></span><span class="sr-only">Toggle Dropdown</span>
              </button>
              <ul class="dropdown-menu" role="menu"></ul>
            </div>

            <div class="btn-group item" id="comboFabricante">
              <button type="button" class="btn btn-default">&emsp;</button>
              <button type="button" class="btn dropdown-toggle btn-primary" data-toggle="dropdown" aria-expanded="false">
                <span class="caret"></span><span class="sr-only">Toggle Dropdown</span>
              </button>
              <ul class="dropdown-menu" role="menu"></ul>
            </div>

            <div class="form-group item" id="FindForName">
              <input type="text" id="findName" name="findName" placeholder="Texto que se desea buscar"/>
            </div>
          </div>

          <div class="btn-group" id="FindRecambio">
            <button type="button" class="btn btn-primary">Buscar</button>
          </div>

        </div>
      </div>
    </div>

    <div class="column" >
      <div class="btn-group filters-btn">
        <button type="button" class="btn" style="background-color:transparent"></button>
        <button type="button" class="btn dropdown-toggle show-popup" data-toggle="" aria-expanded="false" style="background-color:transparent">
           Coches: <span class="caret"></span>
        </button>
        <div class="dropdown-menu filters-popup" role="menu">
          <button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>

          <div class="flex-grid">
            <div class="btn-group item" id="comboMarca">
              <button type="button" class="btn btn-default no-close">&emsp;</button>
              <button type="button" class="btn dropdown-toggle btn-primary no-close" data-toggle="dropdown" aria-expanded="false">
                <span class="caret"></span><span class="sr-only">Toggle Dropdown</span>
              </button>
              <ul class="dropdown-menu no-close" role="menu"></ul>
            </div>

            <div class="btn-group item" id="comboModelo">
              <button type="button" class="btn btn-default">&emsp;</button>
              <button type="button" class="btn dropdown-toggle btn-primary" data-toggle="dropdown" aria-expanded="false">
                <span class="caret"></span><span class="sr-only">Toggle Dropdown</span>
              </button>
              <ul class="dropdown-menu" role="menu"></ul>
            </div>

            <div class="btn-group item" id="comboMotor">
              <button type="button" class="btn btn-default">&emsp;</button>
              <button type="button" class="btn dropdown-toggle btn-primary" data-toggle="dropdown" aria-expanded="false">
                <span class="caret"></span><span class="sr-only">Toggle Dropdown</span>
              </button>
              <ul class="dropdown-menu" role="menu"></ul>
            </div>

          <div class="btn-group" id="FindCoche">
            <button type="button" class="btn btn-primary">Buscar</button>
          </div>

        </div>
      </div>
    </div>
    </div>

    <div class="column" id="colItems" >
      <div id="ErrorMsgItems" ></div>
      <div class="table-responsive">
        <table class="table table-bordered table-striped hidden" id="ItemsList">
          <tbody></tbody>
        </table>
      </div>
    </div>

    <div class="column" id="colCoches">
      <div id="ErrorMsgCoches" ></div>
      <div id="CochesHeard" >
        <h4 id="ItemName"></h4>
        <button id="Update" type="button" class="btn btn-primary">Actualizar</button>
      </div>
      <div id="CochesBody">
        <table class="table table-bordered table-striped" id="CochesList">
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>

</div>

@section Scripts{
  <script type="text/javascript">

    // Identificador del item con el que se llama la página
    var ItemId = @Model.Id;

    // Datos para todos los combos de seleccion de recamios
    var Datos = {
                Categor: @Model.CategoriasToJson(),
                SubCate: @Model.SubCategoriasToJson(),
                Fabric : @Model.FabricantesToJson()
                };

    // Identificadores de los combos para la seleccion de recambios
    var CbIDs = {
                Categor: "#comboCategoria",
                SubCate: "#comboSubCategoria",
                Fabric : "#comboFabricante"
                };

    // Datos para todos los combos de seleccion de recamios
    var CochesDatos = {
                      Marcas : @Model.MarcasToJson(),
                      Modelos: @Model.ModelosToJson(),
                      Motores: @Model.MotoresToJson(),
                      };

    // Identificadores de los combos para la seleccion de recambios
    var CochesCbIDs = {
                      Marca : "#comboMarca",
                      Modelo: "#comboModelo",
                      Motor : "#comboMotor"
                      };

    // Lista de todos los items que hay en la base de datos
    var Items = @Model.ItemsToJson();     

    // Lista de todos los coches que hay en la base de datos
    var Coches = @Model.CochesToJson();     

    // Datos sobre los recambios obtenidos mediante las busquedas
    var findUrl = "";   // Url de la ultima busqueda realizada con todos los parametros
    var Filter;         // Datos de los filtros usados para obtener los datos
    var nItems = 0;     // Número de items totales para los filtros aplicados 
    var lastItem = 0;   // Número del último item que se ha mostrado
    var Orden = 0;      // Indice del campo por donde hay que ordenar, 0 => No ordenar, Negativo => Orden desendiente

    var cbDats;         // Maneja la entrada de datos mediante combos
    var cbCoches;       // Maneja la entrada de datos mediante combos

    var Msg;            // Maneja recuadro para mostrar errores
    var Conn;           // Objeto que maneja la conexion con el servidor

    var chkInit = new Set();    // Coches que estaban chequeados al inicio

    // Inicia manipuladores y variables, después de cargarse la página
    $( function()
      {
      cbDats   = new UIFilters( Datos, CbIDs );
      cbCoches = new UIFilters( CochesDatos, CochesCbIDs );

      $("#findName").val( localStorage["lastFindName"] || "" );

      // Atención cuando se oprimen diferentes elementos de la interface
      $("#FindRecambio").on( 'click', FillItemsList );   

      // Atención cuando se oprimen diferentes elementos de la interface
      $("#FindCoche").on( 'click', FillCochesList );   

      // Pone/quita el la ventana flotante (popup) con los filtros
      $(".filters-btn > button").on( 'click', e => { $(e.currentTarget.parentElement).addClass("open"); e.stopPropagation(); } );  
      $("body").on( 'click', CheckClickOnPopup );  

      // Cierra el popup
      $(".filters-popup > .close").on( 'click', e => 
        { 
        $(e.currentTarget).parent().parent().removeClass("open"); 
        e.stopPropagation();
        } );  

      $("#Update").on( 'click', OnUpdateItemUso );  

      Msg = new MsgAlert( "#ErrorMsgItems" );
      Conn = new ServerConnection( "GET", (s)=>ConnError(s) );

      //if( ItemId>0 )  FindCochesForItem( ItemId );

      //DonwloadAllItems();
      //DonwloadAllCoches();
        FillItemsList();
        FillCochesList();

        if(ItemId) FindCochesForItem( ItemId );
      } );

    // Esta funcion chequea si el click se produjo dentro de una ventana popup
    function CheckClickOnPopup( e )
      {
      var popups = $(".filters-popup");
      for( var i=0; i < popups.length; i++ )
        {
        var rect = $(".filters-popup")[i].getBoundingClientRect();

        if( e.clientX >= rect.left && e.clientX <= rect.right && e.clientY >= rect.top && e.clientY <= rect.bottom )
          return;
        }

      $(".filters-btn").removeClass("open");
      }

    // Muestra los errores producidos durante la solicitud de datos via AJAX
    function ConnError( json )
      {
      var sMsg = "";
      if( json.Error>0 ) sMsg = "<b> Error:" + json.Error + "</b> ";

      Msg.Show( sMsg + json.sError, "danger");
      }

    // Llena la lista de Items con los recambios encontrados
    function FillItemsList( )
      {
      $(".filters-btn").removeClass("open")       // Cierra el popup de filtrado
      $("#ItemsList").children().eq(0).empty();

      var fab = cbDats.GetSelFrabricante(); 
      var cat = cbDats.GetSelCategoria();   
      var sub = cbDats.GetSelSubCategoria();
      var txt = $("#findName").val();

      localStorage["lastFindName"] = txt ;

      txt = txt.toLowerCase();

      for( var i = 0; i < Items.length; ++i )
        {
        var item = Items[i]; 

        if( fab>0 && fab!=item.Fabricante ) continue;
        if( cat>0 && cat!=item.Categoria  ) continue;
        if( sub>0 && sub!= parseInt(item.Codigo/1000)*1000  ) continue;
        if( txt.length >0 && item.Nombre.toLowerCase().indexOf(txt)<0 ) continue;

        var selCls = item.Id == ItemId? " class='row-selected'" : ""
        var itemHml = "<tr data-id="+ item.Id + selCls + "><td>"+ item.Nombre +"</td></tr>";
        $("#ItemsList").append( itemHml );
        }

      $("#ItemsList tbody tr").on( 'click', (e)=>
        { 
        var row = $(e.currentTarget);
        var id  = row.data("id");

        FindCochesForItem( id );
        } );

      ShowInfo();                    // Muestra/esconde información debajo de la tabla de items
      }

    // Decide la informacion que se debe mostrar y cual no, de acuerdo al resultado de la busqueda
    function ShowInfo()        
      {
      var tabla = $("#ItemsList");
      var count = tabla.children().eq(0).children().length;               // Cantidad de Items que se muestran en la tabla

      // Tabla con la lista de recambios encontrados
      if( count == 0 ) tabla.addClass("hidden"); 
      else             tabla.removeClass("hidden"); 

      // Cartel con información
      if( count == 0 ) Msg.Show( "No se encontro ningún recambio que cumpla las condiciones dadas", "info" );
      else             Msg.Hide();
      }

    // Busca los coches donde se usa el item dado por 'id'
    function FillCochesList()
      {
      $("#CochesList").children().eq(0).empty();          // Borra todos los carros de la lista
      $(".filters-btn").removeClass("open")               // Cierra el popup de filtrado

      var mar = cbCoches.GetSelMarcaName(); 
      var mod = cbCoches.GetSelModeloName();   
      var mot = cbCoches.GetSelMotorName();

      for( var i = 0; i < Coches.length; i++ )
        {
        let coche = Coches[i];

        if( mar.length>0 && mar != coche.Marca  ) continue;
        if( mod.length>0 && mod != coche.Modelo ) continue;
        if( mot.length>0 && mot != coche.Motor  ) continue;

        var name = "<strong> "+ coche.Marca +" </strong><span> "+ coche.Modelo +"<strong> con motor </strong>"+ coche.Motor + "</span>";

        var clss = coche.ChkItem? " class='row-selected'" : "" ;
           
        var itemHml = "<tr data-idx="+ i + clss + ">" +
                        "<td>" + name + " ("+ coche.Id +") </td>" +
                      "</tr>";

        $("#CochesList").append( itemHml );
        }

      $("#CochesList tbody tr").on( 'click', (e)=>
        { 
        e.stopPropagation();
        //e.preventDefault();

        var row = $(e.currentTarget);
        var coche = Coches[ row.data("idx") ];

        if( coche.ChkItem )
          {
          coche.ChkItem = 0;
          row.removeClass( "row-selected" );
          }
        else
          {
          coche.ChkItem = 1;
          row.addClass( "row-selected" );
          }
        } );

      }

    // Busca los coches donde se usa el item dado por 'id'
    function FindCochesForItem( id )
      {
      Conn.Send( "/Api/RecambioUso/" + id + "/1", (datos) => 
        {
        SelectItem( id );
        $("#ItemName").text( datos.nombre );

        var cochesSet = new Set();
        for( let coche of datos.coches )
          cochesSet.add( coche.id );  

        for( let coche of Coches )
          {
          if( cochesSet.has(coche.Id) )
            {
            coche.UseItem = 1;
            coche.ChkItem = 1;
            }
          else
            {
            coche.UseItem = 0;
            coche.ChkItem = 0;
            }
          }

        FillCochesList();
        }, "#colCoches" );
      }

    // Cambia la selección al item identificado con 'id'
    function SelectItem( id )
      {
      var tbItems = $("#ItemsList").children().eq(0);
      tbItems.find( ".row-selected" ).removeClass( "row-selected" );

      ItemId = id;

      var Items = tbItems.children();
      for( let i=0; i<Items.length; i++ )
        {
        var item = Items.eq(i);
        if( item.data("id") == ItemId )
          item.addClass( "row-selected" );
        }
      }

    function OnUpdateItemUso()
      {
      var lstDel = [];
      var lstAdd = [];

      for( let coche of Coches )
        {
        if( coche.UseItem == coche.ChkItem ) continue;

        if( coche.UseItem > 0 ) lstDel.push( coche.Id );
        else                    lstAdd.push( coche.Id );
        }

      UpdateBase( lstAdd, lstDel )
      }

    function UpdateBase( lstAdd, lstDel )
      {
      if( lstAdd.length >0 )
        Conn.Send( "/api/AddRecambioUsos/"+ItemId+"/"+lstAdd.join(" "), (datos) => 
          {
          if( datos.Count != lstAdd.length )
            alert( "Ocurrio un error al insertar los coches"  );

          if( lstDel.length==0 ) FindCochesForItem( ItemId );
          }, "#colCoches" );

      if( lstDel.length >0 )
        Conn.Send( "/api/DelRecambioUsos/"+ItemId+"/"+lstDel.join(" "), (datos) => 
          {
          if( datos.Count != lstDel.length )
            alert( "Ocurrio un error al borrar los coches"  );

          FindCochesForItem( ItemId );
          }, "#colCoches" );
      }


  </script>
}
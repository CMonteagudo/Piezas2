@using Piezas2.Core

@{
  ViewData["Title"] = "Modificación, Adición y Borrado de modelos";
  var  val = ViewData["Widget"];
  bool modeWidget = (val!=null && (int)val == 1);
}

<div class="main-frame">
  <div class="columns-for-edit">
  @if( !modeWidget )
    {
    <div id="show-lst-panel"> <img src="~/images/btn-tabla.png" title="Muestra/Oculta lista para selección de recambio a editar." /> </div>

    <div id="panelList">
      <div id="headerList">
        <span id="lb-sel-list">Seleccione un modelo:</span>
        <div class="btn-group filters-btn" style="width:100%;">
          <button type="button" class="btn" style="background-color:transparent"></button>
          <button type="button" class="btn dropdown-toggle show-popup" data-toggle="" aria-expanded="false" style="background-color:transparent; float:right;">
             Filtrar: <span class="caret"></span>
          </button>
          <div class="dropdown-menu filters-popup" role="menu" style="left:unset; right: 0px; width: 250px; ">
            <button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>

            <div class="flex-grid">
              <div class="form-group item" id="FindForName">
                <input type="text" id="FindTxtModelo" name="FindTxtModelo" placeholder="Texto que se desea buscar"/>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div id="list-rec" >
        <div id="ErrorMsgModelos" ></div>
        <div class="table-responsive">
          <table class="table table-bordered table-striped" id="ItemsList">
            <tbody></tbody>
          </table>
        </div>
      </div>

    </div>
    }

    <div id="panelDatos">
    @if( !modeWidget )
      {
      <div id="headerDatos">
        <a id="lnkHome" href="/admin"               ><label>Home        </label></a>
        <a id="lnkNew"  href="javascript:newModelo()"><label>Nuevo modelo</label></a>
      </div>
      }

      <div id="edit-rec" >
        <form id="edit-datos" name="datos" class="hidden" enctype="multipart/form-data" method="post" >
          <div id="foto-datos" style="grid-template-columns: auto;">
            <div></div>
            <div id="datos" style="grid-template-rows: 25px;">
              <div class="label-val">
                <label for="Marca" >Marca:&nbsp;</label>
                <select id="Marca" name="Marca" placeholder="Seleccione una marca">
                  @foreach( var marca in (List<IdName>)ViewData["Marcas"] )
                    {
                    <option value="@marca.Id">@marca.Name</option>
                    }
                </select>
              </div>
              <div class="label-val">
                <label for="Nombre">Nombre:&nbsp;</label><input type="text" id="Nombre" name="Nombre" size="5" placeholder="Escriba nombre del modelo"/>
              </div>
            </div>
          </div>

          <div style="width:100%">
            <br />
            <label for="Descripcion">Descripcion: </label><textarea id="Descripcion" name="Descripcion"></textarea>
          </div>

          <div id="UpdateErrorMsg" ></div>

          <div class="btn-group center-content">
            <button id="btnDel"  type="button" class="btn btn-danger">Borrar</button>
            <button id="btnCopy" type="button" class="btn btn-default">Duplicar</button>
            <button id="btnSave" type="button" class="btn btn-primary">Guardar</button>
          </div>

        <input id="Id"   name="Id"   type="hidden"/>
        <input id="Foto" name="Foto" type="hidden"/>

        <label id="lbId" class="right-top"></label>
        <button id="btnClose" type="button" class="right-top" title="Cierra la ventana." ><span aria-hidden="true">&times;</span></button>
        </form>
      </div>

    </div>

  </div>
</div>


@section Scripts{
  <script type="text/javascript">

    // Lista de todos los modelos que hay en la base de datos
    var Modelos = [];     

    // Item actual que se esta modificando
    var nowModelo;       // Datos del item
    var nextID;         // Identificador el items mas cercano al seleccionado

    var Msg1;           // Maneja recuadro para mostrar errores en la parte de la lista
    var Msg2;           // Maneja recuadro para mostrar errores en la parte de los datos

    // Elementos donde estan los datos que se estan editando
    var _Id;
    var _Nombre;
    var _Marca;
    var _Descripcion;

    // Valores de todos los campos al empezar la edicción
    var EditVals = { Id:0, Nombre:"", Marca:null, Descripcion:"" };

    var Marcas = new Map();
    @foreach( var marca in (List<IdName>)ViewData["Marcas"] )
      {
      @: Marcas.set( @marca.Id , "@marca.Name" );
      }

    var paramId      = @ViewData["Id"];                         // Identificador que se pasa como parametro a la página
    var ModoWidget   = @ViewData["Widget"];                     // Estable el modo Widget, que se usa para llamar la página dentro de otras páginas
    var WidgetNotify = null;                                    // Funcion para notificar al padre cuando esta en modo iFarme

    // Inicia manipuladores y variables, después de cargarse la página
    $( function()
      {
      _Id          = $("#Id");
      _Nombre      = $("#Nombre");
      _Marca       = $("#Marca");
      _Descripcion = $("#Descripcion");

      _Nombre.keyup( CheckSave );
      _Marca.change( CheckSave );
      _Descripcion.keyup( CheckSave );

      // Cuando se oprime el boton para guardar los cambios realizados
      $("#btnSave").on( 'click', GuardaCambios );   
      $("#btnCopy").on( 'click', DuplicarDatos );   
      $("#btnDel" ).on( 'click', DeleteModelo   );   

      Msg2 = new MsgAlert( "#UpdateErrorMsg" );

      if( !ModoWidget )
        {
        // Actualiza ultimo valor de la busqueda por nombre
        $("#FindTxtModelo").val( localStorage["lastFindTxtModelo"] || "" );

        $("#show-lst-panel" ).on( 'click', e =>{ e.stopPropagation(); AnimatePanel(); } );  
        $("#panelDatos"     ).on( 'click', e =>{ AnimatePanel(true);} );

        $("#panelDatos").on( 'resize', e =>{ alert("el tamaño cambio");} );

        // Pone/quita el la ventana flotante (popup) con los filtros
        $(".filters-btn > button").on( 'click', e => 
          { 
          $(e.currentTarget.parentElement).addClass("open"); 
          e.stopPropagation(); 
          FindTxtModelo.focus();
          } );  

        $("body").on( 'click', CheckClickOnPopup );  

        // Cierra el popup por el boton que aparece a la derecha
        $(".filters-popup > .close").on( 'click', HidePopUp ); 

        Msg1 = new MsgAlert( "#ErrorMsgModelos" );

        $("#FindTxtModelo").keyup( FillModelosList );

        RefreshModelosList( paramId );
        }
      else
        {
        setWidgetStyles();
        FindModeloFromServer( paramId );
        }
      } );

    // Si esta en modo Widget notifica el cambio de tamaño para ajustar el tamño del frame
    $(document).ready( function() { ModoWidgetConfig( panelDatos ); } );

    // Actualiza la lista de modelos con el contenido que hay en el servidor
    function RefreshModelosList( id )
      {
      ClearItemDatos();

      var Conn = new ServerConnection( "GET", (s)=>ConnError(s,Msg1) );

      Conn.Send( "/api/modelos", (datos) => 
        {
        Msg1.Hide();

        Modelos = datos;

        FillModelosList();

        if( id>0 ) FindDatosForModelo( id );

        }, "#list-rec" );
      }

    // Llena la lista de modelos
    function FillModelosList( )
      {
      //$(".filters-btn").removeClass("open")       // Cierra el popup de filtrado
      $("#ItemsList").children().eq(0).empty();

      var txt = $("#FindTxtModelo").val();
      localStorage["lastFindTxtModelo"] = txt ;
      txt = txt.toLowerCase();

      for( var i = 0; i < Modelos.length; ++i )
        {
        var modelo = Modelos[i]; 
        var name   = Marcas.get(modelo.marca) + " " + modelo.nombre;

        if( txt.length>0 && name.toLowerCase().indexOf(txt)<0 ) continue;

        var clss = modelo.id == EditVals.Id? " class='row-selected'" : "";
           
        var itemHml = "<tr data-id="+ modelo.id + clss + "><td>" + name + "</td></tr>";

        $("#ItemsList").append( itemHml );
        }

      $("#ItemsList tbody tr").on( 'click', (e)=>
        { 
        var row = $(e.currentTarget);
        var id  = row.data("id");

        FindDatosForModelo( id );
        } );

      ShowInfo();                    // Muestra/esconde información debajo de la tabla de items
      }

    // Busca los datos del modelo con identificador 'id'
    function FindDatosForModelo( id )
      {
      if( DescartModeloChanged()==false ) return;

      ShowPanelDatos();
      AnimatePanel(true);

      for( let modelo of Modelos )
        {
        if( modelo.id==id )
          {
          Msg2.Hide();

          nowModelo = modelo;
          nextID = SelectTableRow( id, "#ItemsList", "#list-rec" );
          SetItemDatos();
          return;
          }
        }

      ClearItemDatos();
      Msg2.Show( "El modelo con Id="+id+" no se encuentra en la base de datos", "danger" );
      }

    // Busca los datos del modelo con identificador 'id' desde el servido
    function FindModeloFromServer( id )
      {
      ShowPanelDatos();
      ClearItemDatos();
      if( id<=0 ) return;

      var Conn = new ServerConnection( "GET", (s)=>ConnError(s,Msg2) );

      Conn.Send( "/api/modelo/" + id, (datos) => 
        {
        Msg2.Hide();

        nowModelo = datos;
        if( nowModelo.id<= 0 )
          {
          Msg2.Show( "El modelo con Id="+id+" no se encuentra en la base de datos", "danger" );
          return;
          }

         SetItemDatos();
        }, "#panelDatos" );
      }

    // Muestra el panel de edicción de los datos
    function ShowPanelDatos()        
      {
      $("#edit-datos").removeClass("hidden");
      }

    // Decide la informacion que se debe mostrar y cual no, de acuerdo al resultado de la busqueda
    function ShowInfo()        
      {
      var count = ItemsList.children[0].children.length;                    // Cantidad de Items que se muestran en la tabla

      ItemsList.style.display = count==0? "none" : "table";

      // Cartel con información
      if( count == 0 ) Msg1.Show( "No se encontro ningún Modelo que cumpla las condiciones dadas", "info" );
      else             Msg1.Hide();
      }

    // Se llama cada vez que se va a cambiar el modelo que se esta editando, si el cambio no es posible retorna false
    function DescartModeloChanged( )
      {
      if( DatosChanged() )
        if( confirm("Desea descartar los cambios realizados") )
          UpdateDatos();
        else return false;

      return true;
      }

    // Chequea si los datos cambia y pone el botón de Guardar o no
    function CheckSave()
      {
      var chgd = DatosChanged();

      btnSave.style.display = chgd? "block" : "none";
      btnCopy.style.display = chgd || !EditVals.Id? "none"  : "block";
      }

    // Borra todos los datos que hay sobre el modelo actual
    function ClearItemDatos()
      {
      EditVals = { Id:0, Nombre:"", Marca:null, Descripcion:"" };

      nowModelo = null;
      nextID = SelectTableRow( -1, "#ItemsList", "#list-rec" );

      UpdateDatos();
      }

    // Pone los datos del modelo actual
    function SetItemDatos( dupicate=false )        
      {
      var IdModelo = dupicate? 0 : nowModelo.id;

      EditVals ={ Id          :IdModelo, 
                  Nombre      :nowModelo.nombre, 
                  Marca       :nowModelo.marca, 
                  Descripcion :nowModelo.descripcion? nowModelo.descripcion : "" };

      UpdateDatos();
      }

    // Pone los datos del modelo actual
    function UpdateDatos()        
      {
      _Id.val( EditVals.Id );
      _Nombre.val( EditVals.Nombre );
      _Marca.val( EditVals.Marca );
      _Descripcion.val( EditVals.Descripcion );

      $("#lbId").text( EditVals.Id>0? "ID: " + EditVals.Id  : "" );

      btnSave.style.display = "none";

      var disp = (EditVals.Id == 0)? "none" : "block";

      btnCopy.style.display = disp;
      btnDel.style.display  = disp; 
      }

    // Verifica si se cambio algun dato desde el inicio de la edicción
    function DatosChanged()        
      {
      if( EditVals.Id          != _Id.val()           ) return true;
      if( EditVals.Nombre      != _Nombre.val()       ) return true;
      if( EditVals.Marca       != _Marca.val()        ) return true;
      if( EditVals.Descripcion != _Descripcion.val()  ) return true;

      return false;
      }

    // Verifica los datos del modelo actual
    function ValidateDatos()        
      {
      if( ValidateStr( _Nombre, "El nombre del modelo" , 1, 5000) &&
          ValidateSel( _Marca , "la marca del modelo." ) )
        return true;

      return false;
      }

    // Pone el modo para instroducir los datos de un modelo nuevo
    function newModelo()
      {
      if( DescartModeloChanged() )
        {
        ShowPanelDatos();
        ClearItemDatos(); 
        }
      }

    // Duplica los datos de la marca actual, para crear una similar
    function DuplicarDatos()
      {
      if( DescartModeloChanged() )
        SetItemDatos( true );
      }

    // Se llama para guardar los camnios realizados
    function GuardaCambios()
      {
      if( !ValidateDatos() ) return;                                                    // Verifica que los datos sean correctos

      var add = _Id.val()<=0;                                                           // Determina si esta adicionando o modificando
      var url = add? "/api/add-modelo" : "/api/modify-modelo";                          // Url del servicio, segun el caso

      var form = document.forms.namedItem("datos");                                     // Obtiene le formulario

      var srv = new ServerConnection( "POST", (s)=>ConnError(s, Msg2) );                // Crea la conección
      srv.SendForm( form, url, (respJson) =>                                            // Ejecuta servicion en el servidor
        {
        var id = respJson.Id;
        if( WidgetNotify ) WidgetNotify( add? "add":"modify", id );                     // Si esta en un Widget, notifica que se Adiciono/Mofifico un modelo
        else               RefreshModelosList( id );                                    // Refresca la lista de modelos y continua la edicción
        });
      }

    // Borra la marca actual de la base de datos
    function DeleteModelo()
      {
      var name = Marcas.get(nowModelo.marca) + " " + nowModelo.nombre;
      if( !confirm("Esta seguro que desea borrar el modelo:\n'" + name + "'" ) )
        return;

      var form = document.forms.namedItem("datos");

      var srv = new ServerConnection( "DELETE", (s)=>ConnError(s, Msg2) );

      srv.SendForm( form, "/api/delete-modelo", (respJson) => 
        {
        if( WidgetNotify ) WidgetNotify("delete");
        else               RefreshModelosList( nextID );
        });
      }


  </script>
}